{"version":3,"sources":["components/QuizzerComponent.js"],"names":["window","FC","undefined","QuizzerComponent","state","currentCard","showFront","set","shuffledCards","_","shuffle","cards","slice","correctCount","incorrectCount","skippedCount","cb","setState","createNewQuizState","UserData","getSet","props","params","setId","copiedState","Object","assign","card","incrementCorrectCountOnCard","id","incrementIncorrectCountOnCard","cardShower","cardNavigation","summary","summaryNavigation","length","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","skip","React","Component"],"mappings":"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","file":"QuizzerComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class QuizzerComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true\n      }\n    }\n\n    createNewQuizState(set) {\n      var shuffledCards = _.shuffle(set.cards.slice(0));\n      return {\n        cards: shuffledCards,\n        currentCard: 0,\n        showFront: true,\n        correctCount: 0,\n        incorrectCount: 0,\n        skippedCount: 0\n      };\n    }\n\n    componentDidMount() {\n\n      var cb = (set) => {\n        this.setState(this.createNewQuizState(set));\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n\n    cardClicked() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n\n      var card = this.state.cards[this.state.currentCard];\n      card.correctCount += 1;\n      FC.UserData.incrementCorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      copiedState.correctCount += 1;\n      this.setState(copiedState);\n    }\n\n    markIncorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      card.incorrectCount += 1;\n      FC.UserData.incrementIncorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      copiedState.incorrectCount += 1;\n      this.setState(copiedState);\n    }\n\n    skip() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      copiedState.skippedCount += 1;\n      this.setState(copiedState);\n    }\n\n    render() {\n      var cardShower;\n      var cardNavigation;\n      var summary;\n      var summaryNavigation;\n\n      if (this.state.cards !== undefined && this.state.currentCard != this.state.cards.length) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div\n            className=\"card\"\n            onClick={(evt) => { this.cardClicked(evt); }}>\n            {textToShow}</div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n          <div className=\"skip\" onClick={() => {this.skip();}}>Skip</div>\n\n        </div>;\n      }\n      else {\n        summary = <FC.QuizSummaryComponent\n          correct={this.state.correctCount}\n          incorrect={this.state.incorrectCount}\n          skipped={this.state.skippedCount} />\n\n        summaryNavigation = <div className=\"summary-choices\">\n            <div>Quiz again</div>\n            <div>Back to set list</div>\n          </div>;\n      }\n\n      return <div className=\"quizzer\">\n        <h2>The Quizzer</h2>\n\n        {summary}\n        {summaryNavigation}\n        {cardShower}\n        {cardNavigation}\n      </div>\n    }\n\n  }\n\n  FC.QuizzerComponent = QuizzerComponent;\n\n})();\n"]}