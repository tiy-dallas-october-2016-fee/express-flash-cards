{"version":3,"sources":["Quizzer.js"],"names":["window","FC","undefined","Quizzer","state","currentCard","showFront","cb","set","console","log","shuffledCards","_","shuffle","cards","splice","setState","UserData","getSet","props","params","setId","copiedState","Object","assign","currentPosition","length","ReactRouter","browserHistory","goBack","cardShower","cardNavigation","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","React","Component"],"mappings":"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","file":"Quizzer.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class Quizzer extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true\n      }\n    }\n\n    componentDidMount() {\n\n      var cb = (set) => {\n        console.log('callback', set);\n\n        // copy and shuffle array\n        var shuffledCards = _.shuffle(set.cards.splice(0));\n        console.log('shuffled', shuffledCards);\n\n        this.setState({\n          cards: shuffledCards,\n          currentCard: 0,\n          showFront: true\n        });\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n\n    cardClicked() {\n      console.log('clickin that card');\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n      console.log('correct!');\n\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n        ReactRouter.browserHistory.goBack();\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    markIncorrect() {\n      console.log('incorrect!');\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    render() {\n\n      var cardShower;\n      var cardNavigation;\n      if (this.state.cards !== undefined) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div\n            className=\"card\"\n            onClick={(evt) => { this.cardClicked(evt); }}>\n            {textToShow}</div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n        </div>;\n      }\n\n      return <div className=\"quizzer\">\n        The Quizzer\n\n        {cardShower}\n        {cardNavigation}\n      </div>\n    }\n\n  }\n\n  FC.Quizzer = Quizzer;\n\n})();\n"]}